////////////////////////////////////////////////////////////////////////
///////  CUserDATA  class by MaTT (c) 2009-2010 ////////////
////////////////////////////////////////////////////////////////////////
#ifndef CUserDATA_H
#define CUserDATA_H
#include "SHO_GS.h"
#include "CInventory.h"
#include "CHotICONS.h"

#pragma pack(push, 1)
class TGAMESERVER_API CUserDATA   { 
public: 
  
  int GetPassiveSkillValue(short nAbilityTYPE);
  void AddPassiveSkillValue(short nAbilityTYPE, short nValue);
  short GetPassiveSkillRate(short nAbilityTYPE);
  void AddPassiveSkillRate(short nAbilityTYPE, short nRate);
  void Cal_AddAbility();
  void Cal_AddAbility(tagITEM& sITEM, short nItemTYPE);
  void Cal_AddPatAbility(tagITEM& Var1, short Var2);
  void Cal_RecoverHP();
  void Cal_RecoverMP();
  int Cal_MaxHP();
  int Cal_MaxMP();
  int Cal_HIT();
  int Cal_DEFENCE();
  int Cal_RESIST();
  int Cal_MaxWEIGHT();
  int Cal_AvoidRATE();
  int Cal_CRITICAL();
  short GetPassiveSkillAttackPower(int iCurAP, short nRightWeaponItemNo);
  short GetPassiveSkillAttackSpeed(float fCurSpeed, short nRightWeaponItemNo);
  float Cal_RunSPEED();
  void Cal_BattleAbility();
  int Cal_ATTACK();
  short GetCur_HP();
  short GetCur_MP();
  virtual short GetCur_WEIGHT();
  int GetCur_LEVEL();
  int GetDef_ATK();
  int GetDef_DEF();
  int GetDef_RES();
  int GetDef_HIT();
  int GetDef_AVOID();
  int GetDef_CRITICAL();
  int GetCur_BIRTH();
  int GetCur_RANK();
  int GetCur_JOHAP();
  int GetCur_FAME();
  int GetCur_JOB();
  int GetCur_EXP();
  int GetCur_BonusPOINT();
  int GetCur_SkillPOINT();
  unsigned char GetCur_HeadSIZE();
  unsigned char GetCur_BodySIZE();
  int GetDef_STR();
  int GetDef_DEX();
  int GetDef_INT();
  int GetDef_CON();
  int GetDef_CHARM();
  int GetDef_SENSE();
  void SetDef_STR(short nValue);
  void SetDef_DEX(short nValue);
  void SetDef_INT(short nValue);
  void SetDef_CON(short nValue);
  void SetDef_CHARM(short nValue);
  void SetDef_SENSE(short nValue);
  int GetCur_STR();
  int GetCur_DEX();
  int GetCur_INT();
  int GetCur_CON();
  int GetCur_CHARM();
  int GetCur_SENSE();
  int GetCur_SaveMP();
  int GetCur_DropRATE();
  void Cal_DropRATE();
  int GetMax_SummonCNT();
  int GetCur_JoHapPOINT(char btUnionIDX);
  virtual void SetCur_JoHapPOINT(unsigned char Var1, short Var2);
  void AddCur_JoHapPOINT(unsigned char btUnionIDX, short nValue);
  void SubCur_JoHapPOINT(unsigned char btUnionIDX, short nValue);
  int GetCur_FameB();
  int GetCur_FameG();
  virtual void AddClanSCORE(int Var1);
  short GetDef_MaxHP();
  short GetDef_MaxMP();
  short GetCur_MaxWEIGHT();
  int GetCur_MAG();
  int GetTot_DEF_DURABITY();
  int GetTot_DEF_GRADE();
  float GetCur_RateUseMP();
  void SetCur_MONEY(__int64 iMoney);
  __int64 GetCur_MONEY();
  void Add_CurMONEY(int iMoney);
  void Sub_CurMONEY(int iMoney);
  void SetCur_HP(short nValue);
  void SetCur_MP(short nValue);
  int AddCur_HP(short nValue);
  int AddCur_MP(short nValue);
  int SubCur_HP(short nValue);
  int SubCur_MP(short nValue);
  void SetCur_FAME(char cValue);
  virtual void SetCur_UNION(char Var1);
  void SetCur_RANK(char Var1);
  char GetCur_FACE();
  void SetCur_FACE(char cValue);
  char GetCur_HAIR();
  void SetCur_HAIR(char cValue);
  virtual void SetCur_JOB(short nValue);
  void SetCur_LEVEL(unsigned short wValue);
  void SetCur_EXP(long lValue);
  void SetCur_BonusPOINT(short nValue);
  void SetCur_SkillPOINT(short nValue);
  tagBasicINFO m_BasicINFO;
  tagBasicAbility m_BasicAbility;
  tagGrowAbility m_GrowAbility;
  tagSkillAbility m_Skills;
  tagQuestData m_Quests;
  CInventory m_Inventory;
  CHotICONS m_HotICONS;
  tagBankData m_Bank;
  tagWishLIST m_WishLIST;
  tagBattleAbility m_Battle;
  int m_iAddValue[0x69];
  short m_nPassiveRate[0x69];
  unsigned char m_btRecoverHP;
  unsigned char m_btRecoverMP;
  int m_iDropRATE;
  short m_PassiveAbilityFromValue[0x6];
  short m_PassiveAbilityFromRate[0x6];
  short m_nPassiveAttackSpeed;
  short m_nPatHP_Mode;
  tagITEM Get_EquipITEM(unsigned short wEquipIDX);
  tagITEM* Get_EquipItemPTR(unsigned short wEquipIDX);
  tagITEM Get_InventoryITEM(t_InvTYPE Var1, unsigned short Var2);
  tagITEM Get_InventoryITEM(unsigned short wTotalListIndex);
  short Add_CatchITEM(short nListRealNO, tagITEM& sITEM);
  short Add_ITEM(short nListRealNO, tagITEM& sITEM);
  short Add_ITEM(tagITEM& sITEM);
  void Sub_ITEM(short nListRealNO, tagITEM& sITEM);
  void Set_ITEM(short nListRealNO, tagITEM& sITEM);
  void ClearITEM(unsigned short wListRealNO);
  virtual void SetCur_SEX(char Var1);
  virtual short GetCur_RACE();
  virtual short GetCur_ATK_SPD();
  virtual float GetCur_MOVE_SPEED();
  virtual int GetCur_ATK();
  virtual int GetCur_DEF();
  virtual int GetCur_RES();
  virtual int GetCur_HIT();
  virtual int GetCur_AVOID();
  virtual int GetCur_CRITICAL();
  virtual int GetCur_MaxHP();
  virtual int GetCur_MaxMP();
  virtual void UpdateCur_Ability();
  virtual unsigned char GetCur_MOVE_MODE();
  virtual int GetCur_FUEL();
  virtual void SubCur_FUEL(short Var1);
  virtual void SetCur_TeamNO(int Var1);
  void SetCur_PK_FLAG(short nValue);
  short GetCur_PK_FLAG();
  short GetCur_STAMINA();
  void SetCur_STAMINA(short nValue);
  void AddCur_STAMINA(short nValue);
  virtual void AddCur_EXP(int Var0);
  void AddCur_BonusPOINT(short nValue);
  void AddCur_SkillPOINT(short nValue);
  void SubCur_BounsPOINT(short Var1);
  void SubCur_SkillPOINT(short Var1);
  bool Set_AbilityValue(unsigned short nType, int iValue);
  void Add_AbilityValue(unsigned short wType, int iValue);
  virtual int GetCur_SummonCNT();
  virtual int GetCur_AbilityValue(unsigned short Var1);
  bool Use_ITEM(unsigned short Var1);
  bool Set_EquipITEM(short nEquipIDX, tagITEM& sITEM);
  bool Check_PatEquipCondition(tagITEM& sITEM, short nEquipIdx);
  bool Check_EquipCondition(tagITEM& sITEM, short nEquipIdx);
  bool Check_JobCollection(short nClassStbIDX);
  virtual void SetCur_PartITEM(short Var1, tagITEM& Var2);
  virtual short GetCur_PartITEM(short Var1);
  int Get_NeedEXP(int iLevel);
  short Get_NeedPoint2AbilityUP(short BasicAbilityType);
  short Get_NeedPoint2SkillUP(short nSkillSLOT);
  virtual int GetCur_R_WEAPON();
  virtual int GetCur_L_WEAPON();
  virtual int GetCur_PET_BODY();
  virtual unsigned long GetCur_IngStatusFLAG();
  short Skill_FindEmptySlot(short nSkillIDX);
  short Skill_FindLearnedLevel(short nSkillIDX);
  short Skill_FindLearnedSlot(short nSkillIDX);
  int Skill_GetAbilityValue(short nAbilityType);
  int Skill_ToUseAbilityVALUE(short nSkillIDX, short nPropertyIDX);
  bool Skill_UseAbilityValue(short nSkillIDX);
  bool Skill_CheckJOB(short nSkillIDX);
  bool Skill_CheckLearnedSKILL(short nSkillIDX);
  bool Skill_CheckNeedABILITY(short nSkillIDX);
  unsigned char Skill_LearnCondition(short nSkillIDX);
  unsigned char Skill_LevelUpCondition(short nCurLevelSkillIDX, short nNextLevelSkillIDX);
  bool Skill_ActionCondition(short nSkillIDX);
  unsigned char Skill_LEARN(short nSkillSLOT, short nSkillIDX, bool bSubPOINT);
  bool Skill_DELETE(short nSkillSLOT, short nSkillIDX);
  void InitPassiveSkill();
  short GetBuySkillVALUE();
  short GetSellSkillVALUE();
  virtual bool Quest_IsPartyLEADER();
  virtual int Quest_GetPartyLEVEL();
  virtual int Quest_GetZoneNO();
  virtual int Quest_DistanceFrom(int Var1, int Var2, int Var3);
  virtual int Quest_PartyMemberCNT();
  unsigned char Quest_GetRegistered(int iQuestIDX);
  bool Quest_Append(unsigned char btSlot, int iQuestIDX);
  short Quest_Append(int iQuestIDX);
  bool Quest_Delete(unsigned char btSLOT, int iQuestID);
  bool Quest_Delete(int iQuestIDX);
  tagITEM* Quest_FindEquipITEM(unsigned short wEquipIDX);
  tagITEM* Quest_FindITEM(tagITEM& sFindITEM);
  bool Quest_SubITEM(tagITEM& sSubITEM);
  short Quest_GetEpisodeVAR(unsigned short wVarIDX);
  short Quest_GetJobVAR(unsigned short wVarIDX);
  short Quest_GetUnionVAR(unsigned short wVarIDX);
  short Quest_GetPlanetVAR(unsigned short wVarIDX);
  void Quest_SetEpisodeVAR(unsigned short wI, short nV);
  void Quest_SetJobVAR(unsigned short wI, short nV);
  void Quest_SetUnionVAR(unsigned short wI, short nV);
  void Quest_SetPlanetVAR(unsigned short wI, short nV);
  virtual bool Reward_WARP(int Var1, tPOINTF& Var2);
  virtual bool Quest_CHANGE_SPEED();
  virtual bool Add_MoneyNSend(int iAmount, unsigned short wType);
  virtual bool Add_ExpNSend(int iExp);
  virtual bool Add_ItemNSend(tagITEM& sITEM);
  virtual bool Add_SkillNSend(short nSkillIDX);
  virtual bool Sub_SkillNSend(short nSkillIDX);
  virtual bool Set_AbilityValueNSend(unsigned short nType, int iValue);
  virtual void Add_AbilityValueNSend(unsigned short wType, int iValue);
  bool Reward_InitSKILL();
  bool Reward_InitSTATUS();
  bool Reward_ITEM(tagITEM& sITEM, unsigned char btRewardToParty, unsigned char btQuestSLOT);
  bool Reward_ABILITY(bool bSetOrAdj, int iType, int iValue, unsigned char btRewardToParty);
  bool Reward_CalEXP(unsigned char btEquation, int iBaseValue, unsigned char btRewardToParty);
  bool Reward_CalMONEY(unsigned char btEquation, int iBaseValue, unsigned char btRewardToParty, short nDupCNT);
  bool Reward_CalITEM(unsigned char btEquation, int iBaseValue, unsigned char btRewardToParty, int iItemSN, short nItemOP, unsigned char btQuestSLOT);
  virtual void Cal_AruaATTACK();
  virtual void Cal_AruaHIT();
  virtual void Cal_AruaAVOID();
  virtual void Cal_AruaCRITICAL();
  virtual void Cal_AruaMaxHP();
  virtual void Cal_AruaMaxMP();
  virtual void Cal_AruaRunSPD();
  virtual short Get_WeightRATE();
  void Apply_2ndJob_Ability();
  CUserDATA(const CUserDATA& Var1);
  CUserDATA();
};
#pragma pack(pop)

#endif

