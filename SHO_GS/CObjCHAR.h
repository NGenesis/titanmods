////////////////////////////////////////////////////////////////////////
///////  CObjCHAR  class by MaTT (c) 2009-2010 ////////////
////////////////////////////////////////////////////////////////////////
#ifndef CObjCHAR_H
#define CObjCHAR_H
#include "SHO_GS.h"
#include "CObjAI.h"
#include "CIngSTATUS.h"

class TGAMESERVER_API CObjCHAR  : public CObjAI   { 
public: 
  virtual void Adjust_HEIGHT();
  bool SendPacketToUSER(CObjCHAR* Var1, classPACKET* Var2);
  bool Send_gsv_STOP();
  bool Send_gsv_MOUSECMD(int iTargetObject);
  bool Send_gsv_MOVE();
  bool Send_gsv_ATTACK(int iTargetObject);
  bool Send_gsv_DAMAGE2Sector(int iAttackObject, unsigned short wDamage, CObjITEM* pDropITEM);
  bool Send_gsv_DAMAGE2Target(CObjCHAR* pAtkOBJ, unsigned short wDamage);
  bool Send_gsv_TOGGLE(unsigned char btTYPE, bool bUpdateSpeed);
  bool Send_gsv_SELF_SKILL(short nSkillIDX, short nNpcSkillMotion);
  bool Send_gsv_TARGET_SKILL(short nSkillIDX, short nNpcSkillMotion);
  bool Send_gsv_POSITION_SKILL(short nSkillIDX);
  void Init_ADD_CHAR(classPACKET* pCPacket);
  void Add_ADJ_STATUS(classPACKET* pCPacket);
  void Send_gsv_RESULT_OF_SKILL(short nSkillIDX);
  bool Send_gsv_EFFECT_OF_SKILL(int iSpellOBJ, short nSkillIDX, unsigned char btResult, short nSpellerINT);
  bool Send_gsv_DAMAGE_OF_SKILL(int iSpellOBJ, short nSkillIDX, unsigned short wDamage, unsigned char btResult, short nSpellerINT, CObjITEM* pDropITEM);
  bool Send_gsv_SET_MOTION(unsigned short wValue, short nMotionNO);
  bool Send_gsv_CLEAR_STATUS(unsigned long dwClearedFLAG);
  float m_fCurAniSPEED;
  unsigned char Apply_DAMAGE(CObjCHAR* pTarget, uniDAMAGE& sDamage, CObjITEM** ppOutITEM, bool bDropItem);
  CAI_OBJ* AI_FindFirstOBJ(int iDistance);
  CAI_OBJ* AI_FindFirstOBJ(CVec2& PosCENTER, int iDistance);
  virtual CAI_OBJ* AI_FindNextOBJ();
  void Give_DAMAGE(CObjCHAR* pTarget, uniDAMAGE sDamage, bool bDropItem);
  virtual bool Send_gsv_CHAT(char* szMsg);
  virtual bool Send_gsv_SHOUT(char* szMsg);
  virtual void Send_gsv_ANNOUNCE_CHAT(char* szMsg);
  bool Send_gsv_ALLIED_CHAT(char* Var1);
  bool Send_gsv_ALLIED_SHOUT(char* Var1);
  CObjCHAR();
  virtual ~CObjCHAR();
	union {
		short m_nCharIdx;
		short m_nCharRACE;
	};
  float m_fScale;
  int m_iHP;
  int m_iMP;
  int m_iTeamNO;
  short m_nPosZ;
  CIngSTATUS m_IngSTATUS;
  virtual void CloseNETWORK();
  virtual bool SendPacketToPARTY(classPACKET* pCPacket);
  virtual bool SendPacketIfPARTY(classPACKET* pCPacket);
  virtual bool SendPacketToPartyExceptME(classPACKET* pCPacket);
  virtual bool SendPacketToPartyExecpNearUSER(classPACKET* pCPacket);
  virtual bool SendPacketToTARGET(CObjCHAR* Var1, classPACKET* Var2);
  virtual bool Send_gsv_SET_HPnMP(unsigned char btApply);
  virtual bool Run_EVENT();
  virtual bool Check_EVENT(CGameOBJ* pSourOBJ, short nEventIDX);
  virtual unsigned long Get_AICheckTIME(int iIDX);
  virtual void Set_AICheckTIME(int iIDX, unsigned long lCheckTIME);
  virtual bool IsFemale();
  virtual short IsMagicDAMAGE();
  virtual int GetCallerUsrIDX();
  virtual int GetCallerObjIDX();
  virtual unsigned long GetCallerHASH();
  virtual short GetSummonedSkillIDX();
  virtual tagMOTION* Get_MOTION(short Var1);
  virtual int Get_HP();
  virtual int Get_MP();
  virtual void Set_HP(int iHP);
  virtual void Set_MP(int iMP);
  virtual int Add_HP(int iAdd);
  virtual int Add_MP(int iAdd);
  virtual int Sub_HP(int iSub);
  virtual int Sub_MP(int iSub);
  virtual void Add_STAMINA(short Var0);
  virtual void Add_MONEY(short Var0);
  virtual short Get_WEIGHT();
  virtual int Get_LEVEL();
  virtual int Get_GiveEXP();
  virtual void Add_EXP(int iExp, bool bApplyStamina);
  virtual int Get_AbilityValue(unsigned short Var1);
  virtual int Get_EXP();
  virtual int Get_JOB();
  virtual unsigned long Get_RIGHT();
  virtual __int64 Get_MONEY();
  virtual int Get_INT();
  virtual int Get_CHARM();
  virtual int Get_SENSE();
  virtual unsigned char Get_MoveMODE();
  virtual unsigned char Get_RideMODE();
  virtual int GetOri_MaxHP();
  virtual int GetOri_MaxMP();
  virtual short GetOri_WalkSPEED();
  virtual short GetOri_RunSPEED();
  virtual short GetOri_ATKSPEED();
  virtual int GetOri_ATK();
  virtual int GetOri_DEF();
  virtual int GetOri_RES();
  virtual int GetOri_HIT();
  virtual int GetOri_AVOID();
  virtual int GetOri_CRITICAL();
  virtual int Save_Damage(int Var1, int Var2);
  virtual void Dec_WeaponLife();
  virtual void Dec_EngineLife();
  virtual classUSER* Give_EXP();
  virtual unsigned long Get_CharHASH();
  virtual void Clear_SummonCNT();
  virtual void Add_SummonCNT(short nV);
  virtual void Sub_SummonCNT(short nV);
  virtual short Get_SummonCNT();
  virtual short Max_SummonCNT();
  virtual void Add_ToTargetLIST(CObjAVT* pAVTChar);
  virtual void Sub_FromTargetLIST(CObjAVT* pAVTChar);
  virtual CParty* GetPARTY();
  virtual CGuild* GetGUILD();
  virtual bool Chk_ShotITEM(unsigned char btShotCnt);
  virtual bool Dec_ShotITEM(unsigned char btShotCnt);
  virtual unsigned short Get_ATTRIBUTE();
  virtual void Stamp_AttackTIME();
  virtual bool Dead(CObjCHAR* pKiller);
  virtual int Proc();
  virtual void UpdateCartGuest();
  bool Skill_IsPassFilter(CObjCHAR* pTarget, short nSkillIDX);
  void Skill_ChangeIngSTATUS(CObjCHAR* pTarget);
  unsigned char Skill_ApplyIngSTATUS(short nSkillIDX, CObjCHAR* pSpeller);
  bool Skill_DamageToAROUND(CVec2& PosCENTER);
  CVec2 Get_GotoPOSITION();
  CVec2 Get_CurPOSITION();
  CVec2 Get_BornPOSITION();
  virtual short Get_nAttackSPEED();
  virtual float Get_MoveSPEED();
  virtual int Get_ATK();
  virtual int Get_DEF();
  virtual int Get_RES();
  virtual int Get_HIT();
  virtual int Get_AVOID();
  virtual int Get_CRITICAL();
  virtual int Get_MaxHP();
  virtual int Get_MaxMP();
  virtual int GetCurrentFrame();
  unsigned long GetCurAbsSEC();
  void Move(float Var1, CVec2& Var2);
  void Command_MOVE(float Var1, float Var2, float Var3);
  virtual void ActionEVENT(int iActionIDX);
  int RealProc(unsigned long dwPassTIME);
  void Proc_IngSTATUS(unsigned long dwPassTime);
  virtual t_ObjTAG Get_CharObjTAG();
  virtual int Get_EconomyVAR(short nVarIDX);
  virtual int Get_WorldVAR(short nVarIDX);
  virtual void Set_EconomyVAR(short nVarIDX, int iValue);
  virtual void Set_WorldVAR(short nVarIDX, int iValue);
  virtual void Add_DAMAGE(unsigned short wDamage);
  virtual unsigned long Get_MagicSTATUS();
  virtual int Get_TeamNO();
  virtual int Get_TEAM();
  virtual unsigned char Is_DAY();
  virtual int Get_ZoneTIME();
  virtual int Get_WorldTIME();
  virtual bool Create_PET(int iCharIDX, float fPosX, float fPosY, int iRange, unsigned char btSetOwner, bool bImmediate);
  virtual CAI_OBJ* Find_LocalNPC(int iNpcNO);
  virtual float Get_SCALE();
  virtual int Get_CharNO();
  virtual int Get_RANDOM(int iMod);
  virtual float Get_CurXPOS();
  virtual float Get_CurYPOS();
  virtual float Get_BornXPOS();
  virtual float Get_BornYPOS();
  virtual void Special_ATTACK();
  virtual float Get_MoveDISTANCE();
  float Get_DISTANCE(CAI_OBJ* pObj);
  int Get_DISTANCE(CVec2& Pos);
  virtual bool SetCMD_STOP();
  virtual bool SetCMD_MOVE2D(float fPosX, float fPosY, unsigned char btRunMODE);
  virtual bool SetCMD_ATTACK(int iTargetObject);
  virtual bool SetCMD_Skill2SELF(short nSkillIDX);
  virtual bool SetCMD_Skill2OBJ(int iTargetObjIDX, short nSkillIDX);
  virtual bool SetCMD_Skill2POS(CVec2& PosGOTO, short nSkillIDX);
  virtual bool Is_TauntSTATUS(int iTargetObject);
  virtual unsigned long GetIngDurationStateFLAG();
  virtual short GetIngDurationStateSKILL(eING_TYPE eTYPE);
  virtual bool SetCMD_MOVE(CVec2& PosCUR, CVec2& PosTO, int iTargetObjIDX);
  virtual bool IsInRANGE(CObjCHAR* pT, int iRange);
  virtual bool Set_MOTION(short nActionIdx, float fMoveSpeed, float fAniSpeed, bool bAttackMotion);
  void Move_COMPLETED();
  virtual bool Send_gsv_SKILL_CANCEL(unsigned char btWhy);
  void Skill_START_03_04_05(CObjCHAR* pTarget);
  void Skill_START_10_11(CObjCHAR* pTarget);
  void Skill_START_19(CObjCHAR* pTarget);
  virtual bool Skill_START(CObjCHAR* pTarget);
  virtual bool Attack_START(CObjCHAR* pTarget);
  virtual bool Casting_START(CObjCHAR* pTarget);
  virtual void Casting_END();
};

#endif

