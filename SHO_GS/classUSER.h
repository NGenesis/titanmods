////////////////////////////////////////////////////////////////////////
///////  classUSER  class by MaTT (c) 2009-2010 ////////////
////////////////////////////////////////////////////////////////////////
#ifndef classUSER_H
#define classUSER_H
#include "SHO_GS.h"
#include "iocpSOCKET.h"
#include "CObjAVT.h"
#include "CCriticalSection.h"
#include "CSLList.h"

class TGAMESERVER_API classUSER  : public iocpSOCKET  , public CObjAVT   { 
public: 
  CCriticalSection m_csSrvRECV;
  CSLList<t_PACKET *> m_SrvRecvQ;
  CStrVAR m_Account;
	union {
		char m_szMD5PassWD[0x21];
		unsigned long m_dwMD5PassWD[0x8];
	};
  short GuildCMD(char* szCMD);
  short Parse_CheatCODE(char* szCode);
  short Check_CheatCODE(char* szCode);
  bool Do_SelfSKILL(short nSkillIDX);
  bool Do_TargetSKILL(int iTargetObject, short nSkillIDX);
  bool Is_SelfSKILL(short nSkillIDX);
  bool Is_TargetSKILL(short nSkillIDX);
  bool Use_pITEM(tagITEM* pITEM);
  bool Use_InventoryITEM(t_PACKET* pPacket);
  classPACKET* Init_gsv_SET_MONEYnINV(unsigned short wType);
  bool Send_gsv_SET_MONEYnINV(classPACKET* pCPacket);
  bool Send_gsv_USE_ITEM(short nItemNO, short nInvIDX);
  virtual bool Send_gsv_JOIN_ZONE(CZoneTHREAD* pZONE);
  bool Send_gsv_LEVELUP(short nLevelDIFF);
  bool Check_WarpPayment(short nZoneNO);
  short Proc_TELEPORT(short nZoneNO, CVec2& PosWARP, bool bSkipPayment);
  bool Send_gsv_ADJUST_POS(bool bOnlySelf);
  bool Send_gsv_CREATE_ITEM_REPLY(unsigned char btResult, short nStepORInvIDX, float* pProcPOINT, tagITEM* pOutItem);
  bool Send_gsv_STORE_TRADE_REPLY(unsigned char btResult);
  bool Send_gsv_QUEST_REPLY(unsigned char btResult, unsigned char btSlot, int iQuestID);
  bool Send_gsv_SET_INV_ONLY(unsigned char btInvIDX, tagITEM* pITEM, unsigned short wType);
  bool Send_gsv_SET_TWO_INV_ONLY(unsigned short wType, unsigned char btInvIdx1, tagITEM* pITEM1, unsigned char btInvIdx2, tagITEM* pITEM2);
  bool Send_gsv_P_STORE_OPENED();
  bool Send_gsv_LOGOUT_REPLY(unsigned short wWaitSec);
  bool Send_gsv_CHARSTATE_CHANGE(unsigned long dwFLAG);
  bool Recv_cli_ALIVE();
  bool Recv_cli_STRESS_TEST(t_PACKET* pPacket);
  short Recv_cli_RELAY_REPLY(t_PACKET* pPacket);
  bool Recv_cli_JOIN_SERVER_REQ(t_PACKET* pPacket);
  bool Recv_cli_CREATE_CHAR(t_PACKET* pPacket);
  bool Recv_cli_DELETE_CHAR(t_PACKET* pPacket);
  bool Recv_cli_CHAR_LIST(t_PACKET* pPacket);
  bool Recv_cli_SET_VAR_REQ(t_PACKET* pPacket);
  bool Recv_cli_JOIN_ZONE(t_PACKET* pPacket);
  short Recv_cli_REVIVE_REQ(unsigned char btReviveTYPE, bool bApplyPenalty, bool bSkipPayment);
  bool Recv_cli_SET_REVIVE_POS();
  bool Recv_cli_TOGGLE(t_PACKET* pPacket);
  bool Recv_cli_SET_MOTION(t_PACKET* pPacket);
  short Recv_cli_CHAT(t_PACKET* pPacket);
  short Recv_cli_SHOUT(t_PACKET* pPacket);
  bool Recv_cli_WHISPER(t_PACKET* pPacket);
  short Recv_cli_PARTY_CHAT(t_PACKET* pPacket);
  void LogCHAT(const char* szMSG, const char* pDestCHAR, const char* szMsgTYPE);
  short Recv_cli_ALLIED_CHAT(t_PACKET* pPacket);
  short Recv_cli_ALLIED_SHOUT(t_PACKET* pPacket);
  bool Recv_cli_STOP(t_PACKET* pPacket);
  bool Recv_cli_ATTACK(t_PACKET* pPacket);
  bool Recv_cli_DAMAGE(t_PACKET* pPacket);
  bool Recv_cli_MOUSECMD(t_PACKET* pPacket);
  bool Recv_cli_SET_WEIGHT_RATE(unsigned char btWeightRate, bool bSend2Around);
  bool Recv_cli_CANTMOVE(t_PACKET* pPacket);
  bool Recv_cli_SETPOS(t_PACKET* pPacket);
  bool Send_gsv_CHANGE_SKIN(unsigned short wAbilityTYPE, int iValue);
  bool Recv_cli_DROP_ITEM(t_PACKET* pPacket);
  bool Send_gsv_EQUIP_ITEM(short nEquipInvIDX, tagITEM* pEquipITEM);
  bool Change_EQUIP_ITEM(short nEquipInvIDX, short nWeaponInvIDX);
  bool Recv_cli_EQUIP_ITEM(t_PACKET* pPacket);
  bool Recv_cli_ASSEMBLE_RIDE_ITEM(t_PACKET* pPacket);
  bool Recv_cli_STORE_TRADE_REQ(t_PACKET* pPacket);
  bool Recv_cli_USE_ITEM(t_PACKET* pPacket);
  bool Recv_cli_SET_HOTICON(t_PACKET* pPacket);
  bool Send_gsv_SET_BULLET(unsigned char btShotTYPE);
  bool Recv_cli_SET_BULLET(t_PACKET* pPacket);
  bool Recv_cli_CREATE_ITEM_REQ(t_PACKET* pPacket);
  bool Send_gsv_ITEM_RESULT_REPORT(unsigned char btReport, unsigned char btItemType, short nItemNo);
  bool Recv_cli_ITEM_RESULT_REPORT(t_PACKET* pPacket);
  bool Recv_cli_HP_REQ(t_PACKET* pPacket);
  bool Recv_cli_GET_FIELDITEM_REQ(t_PACKET* pPacket);
  bool Recv_cli_MOVE_ZULY(t_PACKET* pPacket);
  bool Recv_cli_MOVE_ITEM(t_PACKET* pPacket);
  bool Recv_cli_BANK_LIST_REQ(t_PACKET* pPacket);
  short Recv_cli_TELEPORT_REQ(t_PACKET* pPacket);
  bool Recv_cli_USE_BPOINT_REQ(t_PACKET* pPacket);
  bool Recv_cli_SKILL_LEVELUP_REQ(t_PACKET* pPacket);
  bool Recv_cli_SELF_SKILL(t_PACKET* pPacket);
  bool Recv_cli_TARGET_SKILL(t_PACKET* pPacket);
  bool Recv_cli_POSITION_SKILL(t_PACKET* pPacket);
  bool Recv_cli_TRADE_P2P(t_PACKET* pPacket);
  bool Recv_cli_TRADE_P2P_ITEM(t_PACKET* pPacket);
  bool Recv_cli_SET_WISHITEM(t_PACKET* pPacket);
  classPACKET* Init_gsv_P_STORE_RESULT(unsigned short wObjectIDX);
  bool Send_gsv_P_STORE_RESULT(unsigned short wObjectIDX, unsigned char btResult);
  bool Recv_cli_P_STORE_OPEN(t_PACKET* pPacket);
  bool Recv_cli_P_STORE_CLOSE(t_PACKET* pPacket);
  bool Recv_cli_P_STORE_LIST_REQ(t_PACKET* pPacket);
  bool Recv_cli_P_STORE_BUY_REQ(t_PACKET* pPacket);
  bool Recv_cli_P_STORE_SELL_REQ(t_PACKET* pPacket);
  bool Recv_cli_QUEST_REQ(t_PACKET* pPacket);
  bool Recv_cli_PARTY_REQ(t_PACKET* pPacket);
  bool Recv_cli_PARTY_REPLY(t_PACKET* pPacket);
  bool Recv_cli_APPRAISAL_REQ(t_PACKET* pPacket);
  bool Recv_cli_USE_ITEM_TO_REPAIR(t_PACKET* pPacket);
  bool Recv_cli_REPAIR_FROM_NPC(t_PACKET* pPacket);
  bool Send_wsv_MESSENGER(unsigned char Var1, char* Var2);
  bool Recv_cli_MESSENGER(t_PACKET* pPacket);
  bool Send_tag_MCMD_HEADER(unsigned char btCMD, char* szStr);
  bool Recv_cli_MCMD_APPEND_REQ(t_PACKET* pPacket);
  bool Recv_cli_MESSENGER_CHAT(t_PACKET* pPacket);
  bool Send_gsv_CRAFT_ITEM_RESULT(unsigned char btRESULT);
  classPACKET* Init_gsv_CRAFT_ITEM_REPLY();
  void Send_gsv_CRAFT_ITEM_REPLY(classPACKET* pCPacket, unsigned char btRESULT, unsigned char btOutCNT);
  bool Proc_CRAFT_GEMMING_REQ(t_PACKET* pPacket);
  bool Proc_CRAFT_BREAKUP_REQ(t_PACKET* pPacket, bool bUseMP);
  bool Proc_RENEWAL_CRAFT_BREAKUP_REQ(t_PACKET* pPacket, unsigned char btType);
  bool Proc_CRAFT_UPGRADE_REQ(t_PACKET* pPacket, bool bUseMP);
  bool Recv_cli_CRAFT_ITEM_REQ(t_PACKET* pPacket);
  bool Recv_cli_PARTY_RULE(t_PACKET* pPacket);
  bool Proc_CRAFT_DRILL_SOCKET(t_PACKET* pPacket, unsigned char btType);
  bool Recv_cli_CLAN_COMMAND(t_PACKET* pPacket);
  bool Recv_cli_CLAN_CHAT(t_PACKET* pPacket);
  bool Recv_mon_SERVER_LIST_REQ(t_PACKET* pPacket);
  bool Recv_mon_SERVER_STATUS_REQ(t_PACKET* pPacket);
  bool Recv_mon_SERVER_ANNOUNCE(t_PACKET* pPacket);
  bool Recv_ost_SERVER_USERLOGOUT(t_PACKET* pPacket);
  bool Send_gsv_SERVER_USERLOGOUT_REPLY(const char* szAccount, bool bLogOuted);
  bool Recv_ost_SERVER_ZONEINFO(t_PACKET* pPacket);
  bool Send_gsv_SERVER_ZONEINFO_REPLY();
  bool Recv_ost_SERVER_USERINFO(t_PACKET* pPacket);
  bool Send_gsv_SERVER_USERINFO_REPLY(const char* szACCOUNT, classUSER* pUSER);
  bool Recv_ost_SERVER_CHGUSER(t_PACKET* pPacket);
  bool Send_gsv_SERVER_CHGUSER_REPLY(classUSER* pUSER, unsigned long dwSTATUS, unsigned long dwCMD);
  bool Recv_ost_SERVER_MOVECHR(t_PACKET* pPacket);
  bool Send_gsv_SERVER_MOVECHR_REPLY(classUSER* pUSER, short nZoneNO, short nX, short nY);
  bool Recv_ost_SERVER_ZONEANNOUNCE(t_PACKET* pPacket);
  bool Recv_ost_SERVER_IPSEARCH(t_PACKET* pPacket);
  bool Send_gsv_SERVER_IPSEARCH_REPLY(classUSER* pUSER);
  bool Recv_cli_MALL_ITEM_REQ(t_PACKET* pPacket);
  bool Recv_cli_CLANMARK_SET(t_PACKET* pPacket);
  bool Recv_cli_CLANMARK_REQ(t_PACKET* pPacket);
  bool Recv_cli_CLANMARK_REG_TIME(t_PACKET* pPacket);
  bool Recv_cli_CART_RIDE(t_PACKET* pPacket);
  bool Send_gsv_CART_RIDE(unsigned char btType, unsigned short wSourObjIdx, unsigned short wDestObjIdx, bool bSendToSector);
  bool Send_wsv_CLANMARK_REPLY(unsigned long dwClanID, unsigned short wMarkCRC, unsigned char* pMarkData, short nDataLen);
  void Save_ItemToFILED(tagITEM& sDropITEM, int iRemainTime);
  bool Pick_ITEM(CObjITEM* pITEM);
  virtual bool Send_gsv_SET_HPnMP(unsigned char btApply);
  bool Send_wsv_CHATROOM(unsigned char btCMD, unsigned short wUserID, char* szSTR);
  bool Recv_cli_SELECT_CHAR(t_PACKET* pPacket, bool bFirstZONE, unsigned char btRunMODE, unsigned char btRideMODE);
  bool Send_gsv_GM_COMMAND(char* szAccount, unsigned char btCMD, unsigned short wBlockTIME);
  bool Send_gsv_TELEPORT_REPLY(CVec2& PosWARP, short nZoneNO);
  bool Send_gsv_INVENTORYnQUEST_DATA();
  bool Send_srv_JOIN_SERVER_REPLY(t_PACKET* pRecvPket, char* szAccount);
  bool Send_gsv_CHECK_NPC_EVENT(short nNpcIDX);
  virtual bool Send_gsv_SETEXP(unsigned short wFromObjIDX);
  virtual bool Send_gsv_HP_REPLY(int iObjectIDX, int iHP);
  bool Send_gsv_WHISPER(char* szFromAccount, const char* szMessage);
  unsigned char Send_gsv_SKILL_LEARN_REPLY(short nSkillIDX, bool bCheckCOND);
  bool Send_gsv_TRADE_P2P(int iObjectIDX, unsigned char btResult, char cTradeSLOT);
  bool Send_gsv_TRADE_P2P_ITEM(char cTradeSLOT, tagITEM& sITEM);
  bool Send_gsv_BANK_ITEM_LIST(bool bNewBank);
  bool Send_gsv_BANK_LIST_REPLY(unsigned char btReply);
  bool Send_gsv_PARTY_REQ(int iObjectIDXorTAG, unsigned char btReq);
  bool Send_gsv_PARTY_REPLY(int iObjectIDXorTAG, unsigned char btReply);
  bool Send_gsv_RELAY_REQ(unsigned short wRelayTYPE, short nZoneGOTO, CVec2& PosGOTO);
  bool Send_gsv_SET_MONEYONLY(unsigned short wType);
  bool Send_BulltCOUNT();
  virtual bool Send_gsv_SET_ITEM_LIFE(short nInvIDX, short nLife);
  virtual bool Send_gsv_SPEED_CHANGED(bool bUpdateSpeed);
  bool Do_QuestTRIGGER(unsigned long HashTRIGGER, short nSelectReward);
  bool Send_wsv_CLAN_COMMAND(unsigned char btCMD);
  bool Send_wsv_RESULT_CLAN_SET(char* szClanName);
  bool Send_gsv_BILLING_MESSAGE(unsigned char btMsgType, char* szMsg);
  bool Send_gsv_BILLING_MESSAGE_EXT(unsigned short wMsgType, unsigned long dwPayType, unsigned long* pPlayFlag, char* szMsg);
  bool Send_gsv_BILLING_MESSAGE2(unsigned char btType, char cFunctionType, unsigned long dwPayFlag);
  bool Send_srv_ERROR(unsigned short wErrCODE);
  bool Check_ItemEventMSG(tagITEM& sITEM);
  bool Send_srv_CHECK_AUTH();
  bool Recv_cli_CHECK_AUTH(t_PACKET* pPacket);
  bool Recv_cli_SCREEN_SHOT_TIME(t_PACKET* pPacket);
  bool Send_gsv_SCREEN_SHOT_TIME();
  bool Recv_cli_SUMMON_CMD(t_PACKET* pPacket);
  virtual bool Add_MoneyNSend(int iAmount, unsigned short wType);
  virtual bool Add_ExpNSend(int iExp);
  virtual bool Add_ItemNSend(tagITEM& sITEM);
  virtual bool Add_SkillNSend(short nSkillIDX);
  virtual bool Sub_SkillNSend(short nSkillIDX);
  bool Send_gsv_SET_ABILITY(unsigned short wPacketType, unsigned short wAbilityType, int iValue);
  virtual void Add_AbilityValueNSend(unsigned short wType, int iValue);
  virtual bool Set_AbilityValueNSend(unsigned short wType, int iValue);
  virtual bool Quest_CHANGE_SPEED();
  virtual bool Quest_IsPartyLEADER();
  virtual int Quest_GetPartyLEVEL();
  virtual int Quest_PartyMemberCNT();
  virtual int Quest_GetZoneNO();
  virtual int Quest_DistanceFrom(int iX, int iY, int iZ);
  virtual bool Reward_WARP(int iZoneNO, CVec2& PosGOTO);
  virtual void SetCur_JOB(short nValue);
  bool Set_TeamNoFromUNIQUE();
  bool Set_TeamNoFromClanIDX();
  bool Set_TeamNoFromPartyIDX();
  bool Set_RevivePOS(int iXPos, int iYPos);
  virtual char* Get_StoreTITLE();
  short m_nZoneNO;
  unsigned long m_dwLSID;
  unsigned long m_dwWSID;
  unsigned long m_dwDBID;
  unsigned long m_dwItemSN;
  unsigned long m_HashACCOUNT;
  unsigned long m_HashCHAR;
  unsigned long m_dwRIGHT;
  unsigned long m_dwPayFLAG;
  CStrVAR m_BankPASSWORD;
  short m_nReviveZoneNO;
  CVec2 m_PosREVIVE;
  unsigned char m_btTradeBIT;
  int m_iTradeUserIDX;
  tagTradeITEM m_TradeITEM[0xB];
  short m_nCreateItemEXP;
  int m_iLastEventNpcIDX;
  bool m_bSetImmediateRevivePOS;
  CVec2 m_PosImmediateRivive;
  bool m_bKickOutFromGUMS;
  unsigned char m_btWishLogOutMODE;
  unsigned long m_dwTimeToLogOUT;
  unsigned long m_dwLastSkillActiveTIME;
  unsigned long m_dwLastSkillSpellTIME[0x78];
  unsigned long m_dwLastSkillGroupSpeelTIME[0x10];
  char m_szUserTITLE[0x33];
	struct tagUserSTORE   { 
		bool m_bActive;
		unsigned char m_btSellCNT;
		short m_nInvIDX[0x1F];
		tagITEM m_SellITEM[0x1F];
		unsigned long m_dwSellPricePerEA[0x1F];
		unsigned char m_btWishCNT;
		unsigned char m_btWishIDX[0x1F];
		tagITEM m_WishITEM[0x1F];
		unsigned long m_dwWishPricePerEA[0x1F];
		unsigned char m_btWishIdx2StoreIDX[0x1F];
	};
  tagUserSTORE m_STORE;
  tagMallDATA m_MALL;
  bool Check_TradeITEM();
  void RemoveTradeItemFromINV(classUSER* pTradeUSER, classPACKET* pCPacket);
  void AddTradeItemToINV(classUSER* pTradeUSER, classPACKET* pCPacket);
  unsigned char m_btBankData;
  unsigned char m_btShotTYPE;
  tagITEM* m_pShotITEM;
  unsigned char m_btPlatinumCHAR;
  unsigned char m_btLogOutMODE;
  unsigned long m_dwBackUpTIME;
  unsigned long m_dwLoginTIME;
  __int64 m_i64StartMoney;
  int m_iClanCreateMoney;
  bool m_bInAGIT;
  CParty* m_pPartyBUFF;
  short m_nPartyPOS;
  classUSER(const classUSER& Var1);
  classUSER();
  virtual ~classUSER();
  virtual bool SendPacket(classPACKET* pCPacket);
  virtual bool SendPacketToPARTY(classPACKET* pCPacket);
  virtual bool SendPacketIfPARTY(classPACKET* pCPacket);
  virtual bool SendPacketToPartyExceptME(classPACKET* pCPacket);
  virtual bool SendPacketToTARGET(CObjCHAR* pAtkCHAR, classPACKET* pCPacket);
  char* Get_ACCOUNT();
  unsigned short Get_AccountLEN();
  void Set_ACCOUNT(char* szAccount);
  char* Get_MD5PW();
  bool Check_PartyJoinLEVEL(int iUserLEV, int iAverageLEV, int iPartyLEV);
  unsigned long m_dwCoolTIME[0x4];
  void InitUSER();
  void FreeUSER();
  virtual bool Recv_Done(tagIO_DATA* pRecvDATA);
  bool HandleWorldPACKET();
  virtual bool HandlePACKET(t_PACKETHEADER* pPacketHeader);
  int Proc_ZonePACKET(t_PACKET* pPacket);
  bool IsHacking(char* szDesc, char* szFile, int iLine);
  void Add_EXP(int iGetExp, bool bApplyStamina, unsigned short wFromObjIDX);
  virtual bool Dead(CObjCHAR* pKiller);
  virtual CParty* GetPARTY();
  virtual void CloseNETWORK();
  virtual unsigned long Get_RIGHT();
  virtual unsigned long Get_CharHASH();
  virtual bool Chk_ShotITEM(unsigned char btShotCnt);
  virtual bool Dec_ShotITEM(unsigned char btShotCnt);
  void Set_ShotITEM();
  void Set_ShotITEM(t_eSHOT eShotTYPE);
  void Set_ItemSN(tagITEM& sInITEM);
  bool CheckClanCreateCondition(char cStep);
  bool Send_gsv_ADJ_CLAN_VAR(unsigned char btVarType, int iValue);
  void IncClanLEVEL();
  virtual void AddClanSCORE(int iScore);
  void AddClanCONTRIBUTE(int Var1);
  void AddClanMONEY(int iMoney);
  unsigned char FindClanSKILL(short nSkillNo1, short nSkillNo2);
  bool AddClanSKILL(short nSkillNo);
  bool DelClanSKILL(short nSkillNo);
  bool Add_SrvRecvPacket(t_PACKET* pPacket);
  int ProcLogOUT();
  virtual int Proc();
  int m_iRecvSeqNO;
  virtual unsigned short E_SendP(t_PACKETHEADER* pPacket);
  virtual unsigned short D_RecvH(t_PACKETHEADER* pPacket);
  virtual short D_RecvB(t_PACKETHEADER* pPacket);
  virtual unsigned short P_Length(t_PACKETHEADER* pPacket);
  unsigned long A_Cheater();
  unsigned long B_Cheater();
  unsigned long C_Cheater();
  unsigned long GM_Cheater();
  unsigned long TWGM_Cheater();
  short Cheat_where(CStrVAR* pStrVAR, char* pArg1, char* pArg2, char* szCode);
  short Cheat_account(char* pArg1, char* szCode);
  short Cheat_move(char* pArg1, char* pArg2, char* szCode);
  short Cheat_mm(short nZoneNO, char* pArg2, char* pArg3);
  short Cheat_npc(CStrVAR* pStrVAR, CObjNPC* pNPC, int iNpcIDX, char* pArg2, char* pArg3, char* pArg4);
  short Cheat_add(char* pArg1, char* pArg2, char* pArg3, char* szCode);
  short Cheat_del(CStrVAR* pStrVAR, char* pArg1, char* pArg2, char* pArg3);
  short Cheat_get(CStrVAR* pStrVAR, char* pArg1, char* pArg2, char* szCode);
  short Cheat_out(char* pArg1, char* pArg2, char* szCode);
  short Cheat_shut(char* pArg1, char* pArg2, char* pArg3, char* szCode);
  short Cheat_call(char* pArg1, char* pArg2, char* szCode);
  short Cheat_item(char* pArg1, char* pArg2, char* pArg3, char* pArg4);
  short Cheat_mon(char* pArg1, char* pArg2);
  short Cheat_mon2(char* pArg1, char* pArg2, char* pArg3, char* pArg4);
  short Cheat_damage(char* pArg1, char* pArg2, char* pArg3);
  short Cheat_quest(CStrVAR* pStrVAR, char* pArg1);
  short Cheat_set(classUSER* pUSER, char* pArg1, char* pArg2, char* pArg3);
  short Cheat_toggle(CStrVAR* pStrVAR, char* pArg1);
  short Cheat_regen(CStrVAR* pStrVAR, char* pArg1, char* pArg2);
  short Cheat_speed(char* pArg1);
};

#endif

